{"version":3,"sources":["components/Restaurant/Restaurant.js","components/DayButtons/DayButton/DayButton.js","components/DayButtons/DayButtonContainer.js","components/LikeWindow/LikeWindow.js","App.js","serviceWorker.js","index.js"],"names":["Restaurant","_this","this","info","rows","props","data","portions","forEach","day","idx","length","portion","i","push","react_default","a","createElement","key","name","className","onClick","toggleLikeWindow","meal","price","Component","DayButton","e","changeDayHandler","buttonDay","window","innerWidth","1","2","3","4","5","6","DayButtonContainer","buttons","DayButtons_DayButton_DayButton","LikeWindow","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","hoverOn","newState","setState","state","star1","star2","star3","star4","star5","_this2","id","onMouseEnter","onMouseLeave","hoverOff","allergies","App","handleSelectedDayChange","console","log","selectedDay","toggleDimming","prevState","dim","restaurantName","apiUrl","Date","getDay","displayLikeWindow","likeWindowProps","fetch","method","headers","Content-Type","then","res","json","resJson","_this3","components_DayButtons_DayButtonContainer","map","restaurant","components_Restaurant_Restaurant","components_LikeWindow_LikeWindow","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1b8fb115.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport \"./Restaurant.css\";\n\n\nclass Restaurant extends Component {\n\n  render() {\n    var info = [];\n    var rows = [];\n\n    this.props.data.portions.forEach((day, idx) => {\n      if (idx === this.props.day-1 && this.props.data.portions[idx] && this.props.data.portions[idx].length > 0) {\n        day.forEach((portion, i) => {\n            rows.push([\n                  <tr key={this.props.data.name + \"-\" + idx + \"-row-\" + i} className=\"portionRow\">\n                    <td\n                      key={this.props.data.name + \"-\" + idx + \"-portion-\" + i}\n                      className=\"portion\"\n                      onClick={() => this.props.toggleLikeWindow(this.props.data.name, idx, i, portion)}\n                    >\n                      {portion.meal}\n                    </td>\n                    <td\n                      key={this.props.data.name + \"-\" + idx + \"-price-\" + i}\n                      className=\"price\"\n                      onClick={() => this.props.toggleLikeWindow(this.props.data.name, idx, i, portion)}\n                    >\n                      {portion.price}\n                    </td>\n                  </tr>\n            ]);\n        });\n        info.push([\n          <div key={this.props.data.name}>\n            <h3 className=\"restaurantTitle\">{this.props.data.name}</h3>\n            <hr className=\"restaurantHr\" />\n            <table key={this.props.data.name + \"-\" + idx} className=\"portionsTable\">\n              <tbody>\n              {rows}\n              </tbody>\n            </table>\n          </div>\n        ]);\n      }\n    });\n\n    return (\n      <div className=\"restaurant\">\n        {info}\n      </div>\n    )\n  }\n}\n\nexport default Restaurant;\n","import React, { Component } from 'react';\nimport \"./DayButton.css\";\n\nclass DayButton extends Component {\n  render() {\n    const dayToText = {\n      1: \"Maanantai\",\n      2: \"Tiistai\",\n      3: \"Keskiviikko\",\n      4: \"Torstai\",\n      5: \"Perjantai\",\n      6: \"Lauantai\"\n    }\n\n    const dayToTextSmallScreen = {\n      1: \"Ma\",\n      2: \"Ti\",\n      3: \"Ke\",\n      4: \"To\",\n      5: \"Pe\",\n      6: \"La\"\n    }\n\n    return (\n      <button\n        onClick={(e) => this.props.changeDayHandler(this.props.buttonDay)}\n        className={this.props.day === this.props.buttonDay ? \"dayButton selected\" : \"dayButton\"}\n      >\n        {window.innerWidth > 992 ? dayToText[this.props.buttonDay] : dayToTextSmallScreen[this.props.buttonDay]}\n      </button>\n    )\n  }\n}\n\nexport default DayButton;\n","import React, { Component } from 'react';\nimport DayButton from \"./DayButton/DayButton\";\nimport \"./DayButtonContainer.css\";\n\n\n\nclass DayButtonContainer extends Component {\n\n  render() {\n    var buttons = [];\n\n    for (var i=1; i<7; i++) {\n      buttons.push(\n        <DayButton\n          key={\"dayButton-\" + i}\n          buttonDay={i}\n          day={this.props.day}\n          changeDayHandler={this.props.changeDayHandler}\n        />\n      )\n    }\n\n    return (\n      <div className=\"dayButtonContainer\">\n        {buttons}\n      </div>\n    )\n  }\n}\n\nexport default DayButtonContainer;\n","import React, { Component } from 'react';\nimport \"./LikeWindow.css\";\n\nclass LikeWindow extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      star1: false,\n      star2: false,\n      star3: false,\n      star4: false,\n      star5: false,\n    }\n  }\n\n  hoverOn = (idx) => {\n    var newState = {};\n    for (var i=1; i <= idx; i++) {\n      newState[\"star\"+i] = true;\n    }\n    this.setState(newState);\n  }\n\n  hoverOff() {\n    this.setState({\n      star1: false,\n      star2: false,\n      star3: false,\n      star4: false,\n      star5: false,\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"likeWindow\">\n        <div id=\"top\">\n          <h3 id=\"portionTitle\">{this.props.portion.meal}</h3>\n          <hr id=\"hr1\" />\n        </div>\n        <div id=\"bottom\">\n          <div className=\"stars\">\n            <i className={this.state.star1 ? \"fas fa-star\" : \"far fa-star\"} onMouseEnter={() => this.hoverOn(1)} onMouseLeave={() => this.hoverOff()}></i>\n            <i className={this.state.star2 ? \"fas fa-star\" : \"far fa-star\"} onMouseEnter={() => this.hoverOn(2)} onMouseLeave={() => this.hoverOff()}></i>\n            <i className={this.state.star3 ? \"fas fa-star\" : \"far fa-star\"} onMouseEnter={() => this.hoverOn(3)} onMouseLeave={() => this.hoverOff()}></i>\n            <i className={this.state.star4 ? \"fas fa-star\" : \"far fa-star\"} onMouseEnter={() => this.hoverOn(4)} onMouseLeave={() => this.hoverOff()}></i>\n            <i className={this.state.star5 ? \"fas fa-star\" : \"far fa-star\"} onMouseEnter={() => this.hoverOn(5)} onMouseLeave={() => this.hoverOff()}></i>\n          </div>\n          {this.props.portion.allergies}\n          <button id=\"notServedButton\">\n            Loppunut?\n          </button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default LikeWindow;\n","import React, { Component } from 'react';\nimport Restaurant from \"./components/Restaurant/Restaurant\";\nimport DayButtonContainer from \"./components/DayButtons/DayButtonContainer\";\nimport LikeWindow from \"./components/LikeWindow/LikeWindow\";\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.apiUrl = \"http://localhost:3001/api/foods\"\n    this.state = {\n      data: [],\n      selectedDay: new Date().getDay(),\n      dim: false,\n      displayLikeWindow: false,\n      likeWindowProps: {\n        restaurantName: \"\",\n        day: 0,\n        idx: 0,\n        portion: \"\"\n      }\n    }\n  }\n\n  componentDidMount() {\n    fetch(this.apiUrl, {\n      method: \"GET\",\n      headers: {'Content-Type':'application/json'}\n    })\n      .then(res => res.json())\n      .then(resJson => {\n        this.setState({data: resJson})\n      });\n  }\n\n  handleSelectedDayChange = (day) => {\n    console.log(day)\n    this.setState({selectedDay: day});\n  }\n\n  toggleDimming = () => {\n    this.setState(prevState => ({\n      dim: !prevState.dim\n    }));\n  }\n\n  toggleLikeWindow = (restaurantName, day, i, portion) => {\n    // Work in progress\n    return;\n    if (portion != undefined && portion.meal != undefined && portion.meal.includes(\"LATE LUNCH MENU\")) {\n      return;\n    }\n    this.toggleDimming();\n    this.setState(prevState => ({\n      displayLikeWindow: !prevState.displayLikeWindow,\n      likeWindowProps: {\n        restaurantName: restaurantName,\n        day: day,\n        idx: i,\n        portion: portion\n      }\n    }));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className={this.state.dim ? \"dimmer active\" : \"dimmer\"} onClick={this.toggleLikeWindow}></div>\n        <DayButtonContainer day={this.state.selectedDay} changeDayHandler={this.handleSelectedDayChange} />\n        {this.state.data.map((restaurant, idx) => (\n          <Restaurant\n            key={\"restaurant-\" + idx}\n            data={restaurant}\n            day={this.state.selectedDay}\n            toggleDimming={this.toggleDimming}\n            toggleLikeWindow={this.toggleLikeWindow}\n          />\n        ))}\n        {this.state.displayLikeWindow ?\n          <LikeWindow\n            restaurantName={this.state.likeWindowProps.restaurantName}\n            day={this.state.likeWindowProps.day}\n            idx={this.state.likeWindowProps.idx}\n            portion={this.state.likeWindowProps.portion}\n          />\n        : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}